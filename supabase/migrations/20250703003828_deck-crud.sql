alter table "public"."cards" drop constraint "Cards_deck_id_fkey";

alter table "public"."decks" drop constraint "decks_member_id_fkey";

alter table "public"."purchases" drop constraint "purchases_member_id_fkey";

create table "public"."reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "card_id" bigint,
    "member_id" uuid,
    "difficulty" real,
    "due" timestamp with time zone default now(),
    "elapsed_days" smallint,
    "lapses" smallint,
    "last_review" date,
    "learning_steps" smallint,
    "reps" smallint,
    "scheduled_days" smallint,
    "stability" real,
    "state" smallint default '0'::smallint
);


alter table "public"."reviews" enable row level security;

alter table "public"."cards" drop column "due_date";

alter table "public"."cards" drop column "ease";

alter table "public"."cards" drop column "interval";

alter table "public"."cards" drop column "state";

alter table "public"."cards" add column "member_id" uuid;

alter table "public"."cards" alter column "order" drop identity;

alter table "public"."decks" drop column "card_count";

alter table "public"."decks" drop column "image_url";

alter table "public"."decks" add column "image_path" text;

alter table "public"."members" drop column "num_decks";

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

CREATE UNIQUE INDEX unique_review_per_user_card ON public.reviews USING btree (card_id);

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."cards" add constraint "cards_deck_id_fkey" FOREIGN KEY (deck_id) REFERENCES decks(id) ON DELETE CASCADE not valid;

alter table "public"."cards" validate constraint "cards_deck_id_fkey";

alter table "public"."cards" add constraint "cards_member_id_fkey" FOREIGN KEY (member_id) REFERENCES members(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."cards" validate constraint "cards_member_id_fkey";

alter table "public"."reviews" add constraint "reviews_card_id_fkey" FOREIGN KEY (card_id) REFERENCES cards(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_card_id_fkey";

alter table "public"."reviews" add constraint "reviews_member_id_fkey" FOREIGN KEY (member_id) REFERENCES members(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_member_id_fkey";

alter table "public"."reviews" add constraint "unique_review_per_user_card" UNIQUE using index "unique_review_per_user_card";

alter table "public"."decks" add constraint "decks_member_id_fkey" FOREIGN KEY (member_id) REFERENCES members(id) ON DELETE CASCADE not valid;

alter table "public"."decks" validate constraint "decks_member_id_fkey";

alter table "public"."purchases" add constraint "purchases_member_id_fkey" FOREIGN KEY (member_id) REFERENCES members(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."purchases" validate constraint "purchases_member_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_review_for_card()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into reviews (card_id, member_id)
  values (new.id, new.member_id);

  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.set_member_id()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  new.member_id := auth.uid();
  return new;
end;
$function$
;

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."reviews"
as permissive
for insert
to authenticated
with check (( SELECT (auth.uid() = reviews.member_id)));


create policy "Enable users to view their own data only"
on "public"."reviews"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = member_id));


create policy "members can update their own reviews"
on "public"."reviews"
as permissive
for update
to authenticated
using ((auth.uid() = member_id));


CREATE TRIGGER create_review_trigger AFTER INSERT ON public.cards FOR EACH ROW EXECUTE FUNCTION create_review_for_card();
ALTER TABLE "public"."cards" DISABLE TRIGGER "create_review_trigger";

CREATE TRIGGER set_member_id_on_card BEFORE INSERT ON public.cards FOR EACH ROW EXECUTE FUNCTION set_member_id();

CREATE TRIGGER set_member_id_on_deck BEFORE INSERT ON public.decks FOR EACH ROW EXECUTE FUNCTION set_member_id();

CREATE TRIGGER set_member_id_on_review BEFORE INSERT ON public.reviews FOR EACH ROW EXECUTE FUNCTION set_member_id();


